{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Parameters": {
	    "KeyName": {
	       "Description": "Key Pair name",
           "Type": "AWS::EC2::KeyPair::KeyName",
           "Default": "mykey"
	    },
        "AMISnapshot": {
            "Description": "ImageId",
            "Type": "String"
        },
        "NumberOfServers": {
            "Description": "Number of servers",
            "Type": "Number",
            "Default": "2",
            "MinValue": "2",
            "MaxValue": "4"
        }
    },
    "Conditions": {
        "HasKeyName": {"Fn::Not": [{"Fn::Equals": ["", {"Ref": "AMISnapshot"}]}]}
    },
    "Mappings": {
        "EC2RegionMap": {
            "ap-northeast-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-cbf90ecb"
            },
            "ap-southeast-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-68d8e93a"
            },
            "ap-southeast-2": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-fd9cecc7"
            },
            "eu-central-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-a8221fb5"
            },
            "eu-west-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-a10897d6"
            },
            "sa-east-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-b52890a8"
            },
            "us-east-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-1ecae776"
            },
            "us-west-1": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-d114f295"
            },
            "us-west-2": {
                "AmazonLinuxAMIHVMEBSBacked64bit": "ami-e7527ed7"
            }
        }
    },
    "Resources": {
        "StoreVPC": {
            "Type": "AWS::EC2::VPC",
            "Properties": {
                "CidrBlock": "192.168.1.0/24",
                "EnableDnsHostnames": true,
                "EnableDnsSupport": true
            }
        },
        "SubnetA": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "0",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "192.168.1.0/26",
                "VpcId": {
                    "Ref": "StoreVPC"
                }
            }
        },
        "SubnetB": {
            "Type": "AWS::EC2::Subnet",
            "Properties": {
                "AvailabilityZone": {
                    "Fn::Select": [
                        "1",
                        {
                            "Fn::GetAZs": ""
                        }
                    ]
                },
                "CidrBlock": "192.168.1.64/26",
                "VpcId": {
                    "Ref": "StoreVPC"
                }
            }
        },
        "CustomRouteTable": {
            "Type": "AWS::EC2::RouteTable",
            "Properties": {
                "VpcId": {
                    "Ref": "StoreVPC"
                }
            }
        },
        "RouteTableAssociationA": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "CustomRouteTable"
                },
                "SubnetId": {
                    "Ref": "SubnetA"
                }
            }
        },
        "RouteTableAssociationB": {
            "Type": "AWS::EC2::SubnetRouteTableAssociation",
            "Properties": {
                "RouteTableId": {
                    "Ref": "CustomRouteTable"
                },
                "SubnetId": {
                    "Ref": "SubnetB"
                }
            }
        },
        "InternetGateway": {
            "Type": "AWS::EC2::InternetGateway",
            "Properties": {}
        },
        "VPCGatewayAttachment": {
            "Type": "AWS::EC2::VPCGatewayAttachment",
            "Properties": {
                "VpcId": {
                    "Ref": "StoreVPC"
                },
                "InternetGatewayId": {
                    "Ref": "InternetGateway"
                }
            }
        },
        "RouteToInternet": {
            "Type": "AWS::EC2::Route",
            "Properties": {
                "RouteTableId": {
                    "Ref": "CustomRouteTable"
                },
                "DestinationCidrBlock": "0.0.0.0/0",
                "GatewayId": {
                    "Ref": "InternetGateway"
                }
            },
            "DependsOn": [
                "VPCGatewayAttachment"
            ]
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "elb-sg",
                "VpcId": {"Ref": "StoreVPC"},
                "SecurityGroupIngress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 80,
                    "IpProtocol": "tcp",
                    "ToPort": 80
                }]
            }
        },
        "LoadBalancer": {
            "Type": "AWS::ElasticLoadBalancing::LoadBalancer",
            "Properties": {
                "Subnets": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
                "LoadBalancerName": "elb",
                "CrossZone": true,
                "Listeners": [{
                    "InstancePort": "80",
                    "InstanceProtocol": "HTTP",
                    "LoadBalancerPort": "80",
                    "Protocol": "HTTP"
                }],
                "HealthCheck": {
                    "HealthyThreshold": "3",
                    "Interval": "10",
                    "Target": "HTTP:80/index.html",
                    "Timeout": "5",
                    "UnhealthyThreshold": "2"
                },
                "SecurityGroups": [{"Ref": "LoadBalancerSecurityGroup"}],
                "Scheme": "internet-facing"
            },
            "DependsOn": "VPCGatewayAttachment"
        },
        "WebServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "awsinaction-sg",
                "VpcId": {"Ref": "StoreVPC"},
                "SecurityGroupIngress": [{
                    "CidrIp": "0.0.0.0/0",
                    "FromPort": 22,
                    "IpProtocol": "tcp",
                    "ToPort": 22
                }, {
                    "FromPort": 80,
                    "IpProtocol": "tcp",
                    "SourceSecurityGroupId": {"Ref": "LoadBalancerSecurityGroup"},
                    "ToPort": 80
                }]
            }
        },
        "LaunchConfiguration": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "packages": {
                            "yum": {
                                "httpd": []
                            }
                        },
                        "files": {
                            "/tmp/config": {
                                "content": {"Fn::Join": ["", [
                                    "#!/bin/bash -ex\n",
                                    "PRIVATE_IP=`curl -s http://169.254.169.254/latest/meta-data/local-ipv4`\n",
                                    "echo \"<html><head><title>$PRIVATE_IP</title></head><body><h1>$PRIVATE_IP</h1></body></html>\" > index.html\n"
                                ]]},
                                "mode": "000500",
                                "owner": "root",
                                "group": "root"
                            }
                        },
                        "commands": {
                            "01_config": {
                                "command": "/tmp/config",
                                "cwd": "/var/www/html"
                            }
                        },
                        "services": {
                            "sysvinit": {
                                "httpd": {
                                    "enabled": "true",
                                    "ensureRunning": "true"
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "EbsOptimized": false,
                "ImageId": {"Fn::FindInMap": ["EC2RegionMap", {"Ref": "AWS::Region"}, "AmazonLinuxAMIHVMEBSBacked64bit"]},
                "InstanceType": "t2.micro",
                "SecurityGroups": [{"Ref": "WebServerSecurityGroup"}],
                "KeyName": {"Ref": "KeyName"},
                "AssociatePublicIpAddress": true,
                "UserData": {"Fn::Base64": {"Fn::Join": ["", [
                    "#!/bin/bash -ex\n",
                    "yum update -y aws-cfn-bootstrap\n",
                    "/opt/aws/bin/cfn-init -v --stack ", {"Ref": "AWS::StackName"}, " --resource LaunchConfiguration --region ", {"Ref": "AWS::Region"}, "\n",
                    "/opt/aws/bin/cfn-signal -e $? --stack ", {"Ref": "AWS::StackName"}, " --resource AutoScalingGroup --region ", {"Ref": "AWS::Region"}, "\n"
                ]]}}
            }
        },
        "AutoScalingGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "LoadBalancerNames": [{"Ref": "LoadBalancer"}],
                "LaunchConfigurationName": {"Ref": "LaunchConfiguration"},
                "DesiredCapacity": {"Ref": "NumberOfServers"},
                "MinSize": {"Ref": "NumberOfServers"},
                "MaxSize": {"Ref": "NumberOfServers"},
                "VPCZoneIdentifier": [{"Ref": "SubnetA"}, {"Ref": "SubnetB"}],
                "HealthCheckGracePeriod": 600,
                "HealthCheckType": "EC2"
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT10M"
                }
            },
            "DependsOn": "VPCGatewayAttachment"
        }
    },
    "Outputs": {
        "URL": {
            "Value": {"Fn::Join": ["", ["http://", {"Fn::GetAtt": ["LoadBalancer", "DNSName"]}]]},
            "Description": "Load Balancer URL"
        }
    }
}
